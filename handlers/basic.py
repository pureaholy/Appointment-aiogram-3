from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

import utils.database as db
import os

from aiogram import types, Router, F
from keyboards.admin import start_admin_buttons, admin_buttons, user_cb
from keyboards.basic import cancel_buttons
from keyboards.client import start_buttons, price_buttons

basic_router = Router()


async def show_all_dates(message: types.Message, dates: list):
    if message.from_user.id == int(os.getenv('SUDO_ID')) or await db.is_admin(message.from_user.id):
        builder = InlineKeyboardBuilder()
        for date_tuple in dates:
            date = date_tuple[0]
            builder.row(
                types.InlineKeyboardButton(
                    text=f"{date.replace(':', '.')} ‚ùå",  # –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞ ":" –Ω–∞ "."
                    callback_data=user_cb(data_id=date.replace(':', '.'), action="del_date").pack()
                ))
        if not dates:
            pass
        else:
            await message.answer('üîΩ', reply_markup=cancel_buttons)
            await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:", reply_markup=builder.as_markup())

    elif message.from_user.id != int(os.getenv('SUDO_ID')):
        if not dates:
            pass
        else:
            date_str = '\n'.join(date_tuple[0] for date_tuple in dates)
            await message.answer(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: \n{date_str}', reply_markup=price_buttons)


@basic_router.message(CommandStart())
async def cmd_start(message: types.Message):
    await db.db_start()
    if message.from_user.id == int(os.getenv('SUDO_ID')) or await db.is_admin(message.from_user.id):
        await message.answer('–ü—Ä–∏–≤–µ—Ç –ë–æ—Å—Å!',
                             reply_markup=start_admin_buttons)
    else:
        await message.answer(f'{message.from_user.first_name}, –ø—Ä–∏–≤–µ—Ç!',
                             reply_markup=start_buttons.as_markup())


@basic_router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_panel(message: types.Message):
    if message.from_user.id != int(os.getenv('SUDO_ID')):
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_buttons)

    elif message.from_user.id == int(os.getenv('SUDO_ID')) or await db.is_admin(message.from_user.id):
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=admin_buttons)


@basic_router.message(F.text == "–ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    await message.answer('–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?\n'
                         '–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ pm')


@basic_router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer('–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?\n'
                         '–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ pm')


@basic_router.message(F.text == "–û–±–æ –º–Ω–µ")
async def cmd_help(message: types.Message):
    await message.answer('–ê —á—Ç–æ —Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å?\n'
                         '–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ pm')


@basic_router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cmd_panel(message: types.Message, state: FSMContext):
    if message.from_user.id != int(os.getenv('SUDO_ID')) or await db.is_admin(message.from_user.id):
        await state.clear()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=start_buttons)

    elif message.from_user.id == int(os.getenv('SUDO_ID')) or await db.is_admin(message.from_user.id):
        await state.clear()
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ', reply_markup=admin_buttons)
